// Code generated by protoc-gen-go.
// source: planet.proto
// DO NOT EDIT!

/*
Package planet is a generated protocol buffer package.

It is generated from these files:
	planet.proto

It has these top-level messages:
	PlanetRequest
	PlanetResponse
*/
package planet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PlanetRequest struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PlanetRequest) Reset()         { *m = PlanetRequest{} }
func (m *PlanetRequest) String() string { return proto.CompactTextString(m) }
func (*PlanetRequest) ProtoMessage()    {}

type PlanetResponse struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PlanetResponse) Reset()         { *m = PlanetResponse{} }
func (m *PlanetResponse) String() string { return proto.CompactTextString(m) }
func (*PlanetResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*PlanetRequest)(nil), "planet.PlanetRequest")
	proto.RegisterType((*PlanetResponse)(nil), "planet.PlanetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PlanetService service

type PlanetServiceClient interface {
	PrayerThrows(ctx context.Context, opts ...grpc.CallOption) (PlanetService_PrayerThrowsClient, error)
}

type planetServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlanetServiceClient(cc *grpc.ClientConn) PlanetServiceClient {
	return &planetServiceClient{cc}
}

func (c *planetServiceClient) PrayerThrows(ctx context.Context, opts ...grpc.CallOption) (PlanetService_PrayerThrowsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlanetService_serviceDesc.Streams[0], c.cc, "/planet.PlanetService/PrayerThrows", opts...)
	if err != nil {
		return nil, err
	}
	x := &planetServicePrayerThrowsClient{stream}
	return x, nil
}

type PlanetService_PrayerThrowsClient interface {
	Send(*PlanetRequest) error
	Recv() (*PlanetResponse, error)
	grpc.ClientStream
}

type planetServicePrayerThrowsClient struct {
	grpc.ClientStream
}

func (x *planetServicePrayerThrowsClient) Send(m *PlanetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *planetServicePrayerThrowsClient) Recv() (*PlanetResponse, error) {
	m := new(PlanetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PlanetService service

type PlanetServiceServer interface {
	PrayerThrows(PlanetService_PrayerThrowsServer) error
}

func RegisterPlanetServiceServer(s *grpc.Server, srv PlanetServiceServer) {
	s.RegisterService(&_PlanetService_serviceDesc, srv)
}

func _PlanetService_PrayerThrows_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlanetServiceServer).PrayerThrows(&planetServicePrayerThrowsServer{stream})
}

type PlanetService_PrayerThrowsServer interface {
	Send(*PlanetResponse) error
	Recv() (*PlanetRequest, error)
	grpc.ServerStream
}

type planetServicePrayerThrowsServer struct {
	grpc.ServerStream
}

func (x *planetServicePrayerThrowsServer) Send(m *PlanetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *planetServicePrayerThrowsServer) Recv() (*PlanetRequest, error) {
	m := new(PlanetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PlanetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "planet.PlanetService",
	HandlerType: (*PlanetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrayerThrows",
			Handler:       _PlanetService_PrayerThrows_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
